from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler, filters, ConversationHandler
from datetime import time, timedelta, datetime

# –®–∞–≥–∏ –¥–∏–∞–ª–æ–≥–∞
NAME, TIMES, DAYS = range(3)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –ù–∞–∑–æ–≤–∏ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ.")
    return NAME

async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["medicine"] = update.message.text
    await update.message.reply_text("–£–∫–∞–∂–∏ –≤—Ä–µ–º—è –ø—Ä–∏—ë–º–∞ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –Ω–∞–ø—Ä–∏–º–µ—Ä: 7:00, 13:00, 18:00)")
    return TIMES

async def get_times(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["times"] = [t.strip() for t in update.message.text.split(",")]
    await update.message.reply_text("–°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å?")
    return DAYS

async def get_days(update: Update, context: ContextTypes.DEFAULT_TYPE):
    days = int(update.message.text)
    medicine = context.user_data["medicine"]
    times = context.user_data["times"]
    user_id = update.message.chat_id

    # —Å–æ–∑–¥–∞–µ–º –∑–∞–¥–∞–Ω–∏—è
    for t in times:
        hour, minute = map(int, t.split(":"))
        for day in range(days):
            job_time = time(hour=hour, minute=minute)
            context.job_queue.run_once(
                send_reminder,
                when=timedelta(days=day, hours=hour - datetime.now().hour, minutes=minute - datetime.now().minute),
                chat_id=user_id,
                name=f"{medicine}_{t}_day{day}",
                data=medicine
            )

    await update.message.reply_text(f"–Ø –Ω–∞–ø–æ–º–Ω—é —Ç–µ–±–µ –æ –ø—Ä–∏—ë–º–µ {medicine} {len(times)} —Ä–∞–∑ –≤ –¥–µ–Ω—å –≤ —Ç–µ—á–µ–Ω–∏–µ {days} –¥–Ω–µ–π.")
    return ConversationHandler.END

async def send_reminder(context: ContextTypes.DEFAULT_TYPE):
    job = context.job
    await context.bot.send_message(chat_id=job.chat_id, text=f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –ø–æ—Ä–∞ –ø—Ä–∏–Ω—è—Ç—å {job.data} üíä")

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û–∫–µ–π, –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END

def main():
    TOKEN = "8038849070:AAHWj_SGKU3WKkI6eK4gc_8931f9yQrOmhI"
    app = ApplicationBuilder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
            TIMES: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_times)],
            DAYS: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_days)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(conv_handler)s

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == "__main__":
    main()
